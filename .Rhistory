group_by(evtype) %>%
summarise(
fatalities = sum(fatalities),
injuries = sum(injuries)
) %>%
sort(fatalities, injuries)
population.health <- after1996 %>%
group_by(evtype) %>%
summarise(
fatalities = sum(fatalities),
injuries = sum(injuries)
) %>%
arrange(fatalities, injuries)
?arrange
population.health <- after1996 %>%
group_by(evtype) %>%
summarise(
fatalities = sum(fatalities),
injuries = sum(injuries)
) %>%
arrange(desc(fatalities), desc(injuries))
sort(unique(after1996$evtype))
after1996$evtype <- sub("^heat.*", "excessiveheat", after1996$evtype)
population.health <- after1996 %>%
group_by(evtype) %>%
summarise(
fatalities = sum(fatalities),
injuries = sum(injuries)
) %>%
arrange(desc(fatalities), desc(injuries))
population.health <- after1996 %>%
group_by(evtype) %>%
summarise(
fatalities = sum(fatalities),
injuries = sum(injuries)
) %>%
arrange(desc(fatalities), desc(injuries))
?head
top10 <- head(population.health, n = 10)
View(top10)
# Create long version for plotting
population.health.long <- melt(population.health, id.vars = "evtype")
# Plot
g <- ggplot(data = population.health.long,
aes(x = evtype, y = value, fill = variable)) +
geom_bar(stat = 'identity', position = 'dodge') +
labs(title = "Total Fatalities and Injuries from 1996-2011",
x = "Event Type", fill = "Type") + coord_flip()
ggplotly(g, width = 900, height = 480)
# Create long version for plotting
top10.long <- melt(top10, id.vars = "evtype")
# Plot
g <- ggplot(data = top10.long,
aes(x = evtype, y = value, fill = variable)) +
geom_bar(stat = 'identity', position = 'dodge') +
labs(title = "Total Fatalities and Injuries from 1996-2011",
x = "Event Type", fill = "Type") + coord_flip()
ggplotly(g, width = 900, height = 480)
View(top10)
# Make new data frame with the relevant variables.
after1996 <- storm %>%
select(BGN_DATE, STATE, EVTYPE, FATALITIES, INJURIES,
PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP) %>%
# Subset with only the rows containing data from January 1996
# This is when they started collecting all event types
filter(mdy_hms(BGN_DATE) >= "1996-01-01",
FATALITIES > 0 |
INJURIES > 0 |
CROPDMG > 0 |
PROPDMG > 0
)
# Clean up the variable names, format errors in event type 'evtype'
names(after1996) <- tolower(names(after1996))
names(after1996) <- sub("_", ".", names(after1996))
test <- after1996
after1996 <- test
after1996$evtype <- tolower(after1996$evtype)
after1996$evtype <- gsub(" ", "", after1996$evtype)
after1996$evtype <- gsub("-", "", after1996$evtype)
after1996$evtype <- sub("^hurricane.*|typhoon", "Hurricane", after1996$evtype)
after1996$evtype <- sub(".*flood$", "flood", after1996$evtype)
after1996$evtype <- sub("tstmwind.*|thunderstorm.*", "Thunderstorm Wind", after1996$evtype)
after1996$evtype <- sub("^winterweather.*|wintrymix", "Winter Weather", after1996$evtype)
after1996$evtype <- sub("^wild.*", "wildfire", after1996$evtype)
after1996$evtype <- sub("^freez.*|^frost.*|.*frost$", "Frost/Freeze", after1996$evtype)
after1996$evtype <- sub("^cold.*", "Cold/Wind Chill", after1996$evtype)
after1996$evtype <- sub(".*cold$|^extreme[.]cold.*|excessivesnow|extremewindchill", "Extreme Cold/Wind Chill", after1996$evtype)
after1996$evtype <- sub("^heat.*", "Excessive Heat", after1996$evtype)
after1996$evtype <- sub("^ripcurrent.*", "Rip Current", after1996$evtype)
population.health <- after1996 %>%
group_by(evtype) %>%
summarise(
fatalities = sum(fatalities),
injuries = sum(injuries)
) %>%
arrange(desc(fatalities), desc(injuries))
#filter out for the events with the most fatalities and injuries
top10 <- head(population.health, n = 10)
# Create long version for plotting
top10.long <- melt(top10, id.vars = "evtype")
# Plot
g <- ggplot(data = top10.long,
aes(x = evtype, y = value, fill = variable)) +
geom_bar(stat = 'identity', position = 'dodge') +
labs(title = "Total Fatalities and Injuries from 1996-2011",
x = "Event Type", fill = "Type") + coord_flip()
ggplotly(g, width = 900, height = 480)
after1996$evtype <- sub("^ripcurrent.*", "ripcurrent", after1996$evtype)
# Make new data frame with the relevant variables.
after1996 <- storm %>%
select(BGN_DATE, STATE, EVTYPE, FATALITIES, INJURIES,
PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP) %>%
# Subset with only the rows containing data from January 1996
# This is when they started collecting all event types
filter(mdy_hms(BGN_DATE) >= "1996-01-01",
FATALITIES > 0 |
INJURIES > 0 |
CROPDMG > 0 |
PROPDMG > 0
)
# Clean up the variable names, format errors in event type 'evtype'
names(after1996) <- tolower(names(after1996))
names(after1996) <- sub("_", ".", names(after1996))
test <- after1996
after1996 <- test
after1996$evtype <- tolower(after1996$evtype)
after1996$evtype <- gsub(" ", "", after1996$evtype)
after1996$evtype <- gsub("-", "", after1996$evtype)
after1996$evtype <- sub("^hurricane.*|typhoon", "hurricane", after1996$evtype)
after1996$evtype <- sub(".*flood$", "flood", after1996$evtype)
after1996$evtype <- sub("tstmwind.*|thunderstorm.*", "thunderstormwind", after1996$evtype)
after1996$evtype <- sub("^winterweather.*|wintrymix", "winterweather", after1996$evtype)
after1996$evtype <- sub("^wild.*", "wildfire", after1996$evtype)
after1996$evtype <- sub("^freez.*|^frost.*|.*frost$", "frost/freeze", after1996$evtype)
after1996$evtype <- sub("^cold.*", "cold/wind chill", after1996$evtype)
after1996$evtype <- sub(".*cold$|^extreme[.]cold.*|excessivesnow|extremewindchill", "extreme cold/wind chill", after1996$evtype)
after1996$evtype <- sub("^heat.*", "excessiveheat", after1996$evtype)
after1996$evtype <- sub("^ripcurrent.*", "ripcurrent", after1996$evtype)
population.health <- after1996 %>%
group_by(evtype) %>%
summarise(
fatalities = sum(fatalities),
injuries = sum(injuries)
) %>%
arrange(desc(fatalities), desc(injuries))
#filter out for the events with the most fatalities and injuries
top10 <- head(population.health, n = 10)
# Create long version for plotting
top10.long <- melt(top10, id.vars = "evtype")
# Plot
g <- ggplot(data = top10.long,
aes(x = evtype, y = value, fill = variable)) +
geom_bar(stat = 'identity', position = 'dodge') +
labs(title = "Total Fatalities and Injuries from 1996-2011",
x = "Event Type", fill = "Type") + coord_flip()
ggplotly(g, width = 900, height = 480)
exponent.key <- c(K = 1000, M = 1000000, B = 1000000000)
# Create new variables that sum the total property and crop damage
econ.dmg <- after1996 %>%
group_by(evtype) %>%
summarise(
property = sum(propdmg * exponent.key[propdmgexp]),
crop = sum(cropdmg * exponent.key[cropdmgexp])
) %>%
arrange(desc(property), desc(crop))
View(econ.dmg)
View(after1996)
exponent.key <- c("" = 1, K = 1000, M = 1000000, B = 1000000000)
after1996[1,]$cropdmgexp
after1996[2,]$cropdmgexp
exponent.key <- c(O = 1, K = 1000, M = 1000000, B = 1000000000)
exponent.key
after1996$cropdmgexp <- exponent.key[after1996$cropdmgexp]
after1996$cropdmgexp[after1996$cropdmgexp == ""] <- "O"
# Make new data frame with the relevant variables.
after1996 <- storm %>%
select(BGN_DATE, STATE, EVTYPE, FATALITIES, INJURIES,
PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP) %>%
# Subset with only the rows containing data from January 1996
# This is when they started collecting all event types
filter(mdy_hms(BGN_DATE) >= "1996-01-01",
FATALITIES > 0 |
INJURIES > 0 |
CROPDMG > 0 |
PROPDMG > 0
)
# Clean up the variable names, format errors in event type 'evtype'
names(after1996) <- tolower(names(after1996))
names(after1996) <- sub("_", ".", names(after1996))
test <- after1996
after1996 <- test
after1996$evtype <- tolower(after1996$evtype)
after1996$evtype <- gsub(" ", "", after1996$evtype)
after1996$evtype <- gsub("-", "", after1996$evtype)
after1996$evtype <- sub("^hurricane.*|typhoon", "hurricane", after1996$evtype)
after1996$evtype <- sub(".*flood$", "flood", after1996$evtype)
after1996$evtype <- sub("tstmwind.*|thunderstorm.*", "thunderstormwind", after1996$evtype)
after1996$evtype <- sub("^winterweather.*|wintrymix", "winterweather", after1996$evtype)
after1996$evtype <- sub("^wild.*", "wildfire", after1996$evtype)
after1996$evtype <- sub("^freez.*|^frost.*|.*frost$", "frost/freeze", after1996$evtype)
after1996$evtype <- sub("^cold.*", "cold/wind chill", after1996$evtype)
after1996$evtype <- sub(".*cold$|^extreme[.]cold.*|excessivesnow|extremewindchill", "extreme cold/wind chill", after1996$evtype)
after1996$evtype <- sub("^heat.*", "excessiveheat", after1996$evtype)
after1996$evtype <- sub("^ripcurrent.*", "ripcurrent", after1996$evtype)
exponent.key <- c(O = 1, K = 1000, M = 1000000, B = 1000000000)
after1996$cropdmgexp[after1996$cropdmgexp == ""] <- "O"
econ.dmg <- after1996 %>%
group_by(evtype) %>%
summarise(
property = sum(propdmg * exponent.key[propdmgexp]),
crop = sum(cropdmg * exponent.key[cropdmgexp])
) %>%
arrange(desc(property), desc(crop))
after1996$cropdmgexp[after1996$cropdmgexp == ""] <- "O"
after1996$propdmgexp[after1996$propdmgexp == ""] <- "O"
# Create new variables that sum the total property and crop damage
econ.dmg <- after1996 %>%
group_by(evtype) %>%
summarise(
property = sum(propdmg * exponent.key[propdmgexp]),
crop = sum(cropdmg * exponent.key[cropdmgexp])
) %>%
arrange(desc(property), desc(crop))
# Create new variables that sum the total property and crop damage
econ.dmg <- after1996 %>%
group_by(evtype) %>%
summarise(
property = sum(propdmg * exponent.key[propdmgexp]),
crop = sum(cropdmg * exponent.key[cropdmgexp])
) %>%
arrange(desc(property), desc(crop))
top10crop <- head(econ.dmg, n = 10)[,c(1,3)]
View(top10crop)
head(econ.dmg, n = 10)
# Create new variables that sum the total property and crop damage
econ.dmg <- after1996 %>%
group_by(evtype) %>%
summarise(
property = sum(propdmg * exponent.key[propdmgexp]),
crop = sum(cropdmg * exponent.key[cropdmgexp])
) %>%
arrange(desc(property), desc(crop))
View(econ.dmg)
top10prop <- head(arrange(econ.dmg, desc(property)), n = 10)[,1:2]
View(top10prop)
top10crop <- head(arrange(econ.dmg, desc(crop)), n = 10)[,c(1,3)]
View(top10crop)
# Create long version for plotting
top10prop.long <- melt(top10prop, id.vars = "evtype")
after1996$evtype <- sub("^stormsurge.*", "stormsurge/tide", after1996$evtype)
View(after1996)
# Create new variables that sum the total property and crop damage
econ.dmg <- after1996 %>%
group_by(evtype) %>%
summarise(
property = sum(propdmg * exponent.key[propdmgexp]),
crop = sum(cropdmg * exponent.key[cropdmgexp])
)
top10prop <- head(arrange(econ.dmg, desc(property)), n = 10)[,1:2]
View(top10prop)
top10crop <- head(arrange(econ.dmg, desc(crop)), n = 10)[,c(1,3)]
View(top10crop)
# Create long version for plotting
top10prop.long <- melt(top10prop, id.vars = "evtype")
View(top10prop.long)
# Plot
gprop <- ggplot(data = top10prop.long,
aes(x = evtype, y = value)) +
geom_bar(stat = 'identity', position = 'dodge') +
labs(title = "Total Property and Crop Damage from 1996-2011",
x = "Event Type", y = "Damage in U.S Dollar") + coord_flip()
ggplotly(gprop, width = 900, height = 480)
# Plot
gprop <- ggplot(data = top10prop,
aes(x = evtype, y = prop)) +
geom_bar(stat = 'identity', position = 'dodge') +
labs(title = "Total Property Damage from 1996-2011",
x = "Event Type", y = "Total Damage in U.S Dollar") + coord_flip()
ggplotly(gprop, width = 900, height = 480)
# Plot
gprop <- ggplot(data = top10prop,
aes(x = evtype, y = property)) +
geom_bar(stat = 'identity', position = 'dodge') +
labs(title = "Total Property Damage from 1996-2011",
x = "Event Type", y = "Total Damage in U.S Dollar") + coord_flip()
ggplotly(gprop, width = 900, height = 480)
# Plot
gprop <- ggplot(data = top10prop,
aes(x = evtype, y = property)) +
geom_bar(stat = 'identity', position = 'dodge', color = "red") +
labs(title = "Total Property Damage from 1996-2011",
x = "Event Type", y = "Total Damage in U.S Dollar") + coord_flip()
ggplotly(gprop, width = 900, height = 480)
top10crop.long <- melt(top10crop, id.vars = "evtype")
ggplotly(gprop, width = 900, height = 480)
# Plot
gprop <- ggplot(data = top10prop,
aes(x = evtype, y = property, color = "red")) +
geom_bar(stat = 'identity', position = 'dodge') +
labs(title = "Total Property Damage from 1996-2011",
x = "Event Type", y = "Total Damage in U.S Dollar") + coord_flip()
ggplotly(gprop, width = 900, height = 480)
# Plot
gprop <- ggplot(data = top10prop,
aes(x = evtype, y = property)) +
labs(title = "Total Property Damage from 1996-2011",
x = "Event Type", y = "Total Damage in U.S Dollar") + coord_flip()
ggplotly(gprop, width = 900, height = 480)
# Plot
gprop <- ggplot(data = top10prop,
aes(x = evtype, y = property)) +
geom_bar(stat = 'identity', position = 'dodge', fill = "red") +
labs(title = "Total Property Damage from 1996-2011",
x = "Event Type", y = "Total Damage in U.S Dollar") + coord_flip()
ggplotly(gprop, width = 900, height = 480)
# Plot
gprop <- ggplot(data = top10prop,
aes(x = evtype, y = property)) +
geom_bar(stat = 'identity', position = 'dodge', fill = "darkred") +
labs(title = "Total Property Damage from 1996-2011",
x = "Event Type", y = "Total Damage in U.S Dollar") + coord_flip()
ggplotly(gprop, width = 900, height = 480)
# Plot
gcrop <- ggplot(data = top10crop,
aes(x = evtype, y = crop)) +
geom_bar(stat = 'identity', position = 'dodge', fill = "darkblue") +
labs(title = "Total Crop Damage from 1996-2011",
x = "Event Type", y = "Total Damage in U.S Dollar") + coord_flip()
ggplotly(gcrop, width = 900, height = 480)
ggplotly(gprop, width = 900, height = 480)
View(population.health)
as.vector(state.x77[,1])
View(population.health)
View(top10)
View(top10.long)
state.abb
View(after1996)
by_state <- after1996 %>%
group_by(state) %>%
summarise(
fatalities = sum(fatalities)
injuries = sum(injuries)
by_state <- after1996 %>%
group_by(state) %>%
summarise(
fatalities = sum(fatalities),
injuries = sum(injuries)
)
View(by_state)
by_state <- after1996 %>%
group_by(state) %>%
summarise(
fatalities = sum(fatalities),
injuries = sum(injuries)
) %>%
filter(state %in% state.abb)
state_health <- data.frame(State = by_state$state, Health = by_state[,2:3])
View(state_health)
# Create hover text
by_state$hover <- with(by_state, paste(state, '<br>', "Fatalities:", fatalities,
'<br>', "Injuries:", injuries))
# Make state borders red
borders <- list(color = toRGB("red"))
# Set up some mapping options
map_options <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(z = ~by_state$fatalities, text = ~by_state$hover, locations = ~by_state$state,
type = 'choropleth', locationmode = 'USA-states',
color = ~by_state$fatalities, colors = 'Greens', marker = list(line = borders)) %>%
layout(title = 'Total Fatalities from 1996 to 2011', geo = map_options)
by_state <- after1996 %>%
group_by(state) %>%
summarise(
fatalities = sum(fatalities),
injuries = sum(injuries)
) %>%
filter(state %in% state.abb) %>%
mutate(total = fatalities + injuries)
?plot_ly
plot_ly(z = ~by_state$fatalities, text = ~by_state$hover, locations = ~by_state$state,
type = 'choropleth', locationmode = 'USA-states',
color = ~by_state$total, colors = 'Greens' colorbar(title = "Total Fatalities and Injuries"), marker = list(line = borders)) %>%
plot_ly(z = ~by_state$fatalities, text = ~by_state$hover, locations = ~by_state$state,
type = 'choropleth', locationmode = 'USA-states',
color = ~by_state$total, colors = 'Greens', colorbar(title = "Total Fatalities and Injuries"), marker = list(line = borders)) %>%
layout(title = 'Total Damage to Population Health from 1996 to 2011', geo = map_options)
?colorbar
plot_ly(z = ~by_state$fatalities, text = ~by_state$hover, locations = ~by_state$state,
type = 'choropleth', locationmode = 'USA-states',
color = ~by_state$total, colors = 'Greens', marker= list(line = borders)) %>%
colorbar(title = "Total Fatalities and Injuries") %>%
layout(title = 'Total Damage to Population Health from 1996 to 2011', geo = map_options)
plot_ly(z = ~by_state$fatalities, text = ~by_state$hover, locations = ~by_state$state,
type = 'choropleth', locationmode = 'USA-states',
color = ~by_state$total, colors = 'Greens', marker= list(line = borders)) %>%
layout(title = 'Total Damage to Population Health from 1996 to 2011', geo = map_options)
plot_ly(z = ~by_state$total, text = ~by_state$hover, locations = ~by_state$state,
type = 'choropleth', locationmode = 'USA-states',
color = ~by_state$total, colors = 'Greens', marker = list(line = borders)) %>%
layout(title = 'Total Damage to Population Health from 1996 to 2011', geo = map_options)
by_state <- after1996 %>%
group_by(state) %>%
summarise(
fatalities = sum(fatalities),
injuries = sum(injuries)
) %>%
filter(state %in% state.abb) %>%
mutate(total = fatalities + injuries)
# Create hover text
by_state$hover <- with(by_state, paste(state, '<br>', "Fatalities:", fatalities,
'<br>', "Injuries:", injuries))
# Create hover text
by_state$hover <- with(by_state, paste(state, '<br>', "Fatalities:", fatalities,
'<br>', "Injuries:", injuries,
'<br>', "Total:", total))
# Make state borders red
borders <- list(color = toRGB("red"))
# Set up some mapping options
map_options <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(z = ~by_state$total, text = ~by_state$hover, locations = ~by_state$state,
type = 'choropleth', locationmode = 'USA-states',
color = by_state$total, colors = 'Greens', marker = list(line = borders)) %>%
layout(title = 'Total Damage to Population Health from 1996 to 2011', geo = map_options)
plot_ly(z = ~by_state$state, text = ~by_state$hover, locations = ~by_state$state,
type = 'choropleth', locationmode = 'USA-states',
color = by_state$total, colors = 'Greens', marker = list(line = borders)) %>%
layout(title = 'Total Damage to Population Health from 1996 to 2011', geo = map_options)
plot_ly(z = ~by_state$total, text = ~by_state$hover, locations = ~by_state$state,
type = 'choropleth', locationmode = 'USA-states',
color = by_state$total, colors = 'Greens', marker = list(line = borders)) %>%
layout(title = 'Total Damage to Population Health from 1996 to 2011', geo = map_options)
plot_ly(z = ~by_state$total, text = ~by_state$hover, locations = ~by_state$state,
type = 'choropleth', locationmode = 'USA-states',
color = by_state$total, colors = 'Greens', marker = list(line = borders)) %>%
colorbar(title = "Millions USD") %>%
layout(title = 'Total Damage to Population Health from 1996 to 2011', geo = map_options)
plot_ly(z = ~by_state$total, text = ~by_state$hover, locations = ~by_state$state,
type = 'choropleth', locationmode = 'USA-states',
color = by_state$total, colors = 'Greens', marker = list(line = borders)) %>%
colorbar(title = "Total Number of Fatalities and Injuries") %>%
layout(title = 'Total Number of Fatalities and Injuries from 1996 to 2011', geo = map_options)
plot_ly(z = ~by_state$total, text = ~by_state$hover, locations = ~by_state$state,
type = 'choropleth', locationmode = 'USA-states',
color = by_state$total, colors = 'Greens', marker = list(line = borders)) %>%
colorbar(title = "Total") %>%
layout(title = 'Total Number of Fatalities and Injuries from 1996 to 2011', geo = map_options)
# Create hover text
by_state$hover <- with(by_state, paste("Fatalities:", fatalities,
'<br>', "Injuries:", injuries,
'<br>', "Total:", total))
plot_ly(z = ~by_state$total, text = ~by_state$hover, locations = ~by_state$state,
type = 'choropleth', locationmode = 'USA-states',
color = by_state$total, colors = 'Greens', marker = list(line = borders)) %>%
colorbar(title = "Total") %>%
layout(title = 'Total Number of Fatalities and Injuries from 1996 to 2011', geo = map_options)
# Create new variables that sum the total property and crop damage
econ.dmg <- after1996 %>%
group_by(state) %>%
summarise(
property = sum(propdmg * exponent.key[propdmgexp]),
crop = sum(cropdmg * exponent.key[cropdmgexp])
)
# Create new variables that sum the total property and crop damage
by_state2 <- after1996 %>%
group_by(state) %>%
summarise(
property = sum(propdmg * exponent.key[propdmgexp]),
crop = sum(cropdmg * exponent.key[cropdmgexp])
) %>%
filter(state %in% state.abb) %>%
mutate(total = fatalities + injuries)
# Create new variables that sum the total property and crop damage
by_state2 <- after1996 %>%
group_by(state) %>%
summarise(
property = sum(propdmg * exponent.key[propdmgexp]),
crop = sum(cropdmg * exponent.key[cropdmgexp])
) %>%
filter(state %in% state.abb) %>%
mutate(total = property + crop)
View(by_state2)
# Create hover text
by_state2$hover <- with(by_state2, paste("Property:", property,
'<br>', "Crop:", crop,
'<br>', "Total:", total))
# Set up some mapping options
map_options <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(z = ~by_state2$total, text = ~by_state2$hover, locations = ~by_state2$state,
type = 'choropleth', locationmode = 'USA-states',
color = by_state2$total, colors = 'Greens', marker = list(line = borders)) %>%
colorbar(title = "Total") %>%
layout(title = 'Total Property and Crop Damage in USD from 1996 to 2011', geo = map_options)
?plot_ly
plot_ly(width = 900, height = 480,z = ~by_state$total, text = ~by_state$hover, locations = ~by_state$state,
type = 'choropleth', locationmode = 'USA-states',
color = by_state$total, colors = 'Greens', marker = list(line = borders)) %>%
colorbar(title = "Total") %>%
layout(title = 'Total Number of Fatalities and Injuries from 1996 to 2011', geo = map_options)
